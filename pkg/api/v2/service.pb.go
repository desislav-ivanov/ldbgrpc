// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status_Response int32

const (
	Status_OK    Status_Response = 0
	Status_Error Status_Response = 1
)

var Status_Response_name = map[int32]string{
	0: "OK",
	1: "Error",
}

var Status_Response_value = map[string]int32{
	"OK":    0,
	"Error": 1,
}

func (x Status_Response) String() string {
	return proto.EnumName(Status_Response_name, int32(x))
}

func (Status_Response) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 0}
}

type Status struct {
	Code                 Status_Response `protobuf:"varint,1,opt,name=code,proto3,enum=v2.Status_Response" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() Status_Response {
	if m != nil {
		return m.Code
	}
	return Status_OK
}

type SearchKey struct {
	ApiVersion           string   `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchKey) Reset()         { *m = SearchKey{} }
func (m *SearchKey) String() string { return proto.CompactTextString(m) }
func (*SearchKey) ProtoMessage()    {}
func (*SearchKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *SearchKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchKey.Unmarshal(m, b)
}
func (m *SearchKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchKey.Marshal(b, m, deterministic)
}
func (m *SearchKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchKey.Merge(m, src)
}
func (m *SearchKey) XXX_Size() int {
	return xxx_messageInfo_SearchKey.Size(m)
}
func (m *SearchKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchKey.DiscardUnknown(m)
}

var xxx_messageInfo_SearchKey proto.InternalMessageInfo

func (m *SearchKey) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *SearchKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type Payload struct {
	ApiVersion           string   `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *Payload) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Payload) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("v2.Status_Response", Status_Response_name, Status_Response_value)
	proto.RegisterType((*Status)(nil), "v2.Status")
	proto.RegisterType((*SearchKey)(nil), "v2.SearchKey")
	proto.RegisterType((*Payload)(nil), "v2.Payload")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x51, 0x6b, 0xd3, 0x50,
	0x18, 0x5d, 0x1a, 0x1b, 0xed, 0xe7, 0x2a, 0xe5, 0x9b, 0x96, 0x92, 0xcd, 0x11, 0xf2, 0x62, 0x19,
	0x36, 0xa9, 0xf1, 0x41, 0x18, 0x28, 0xb4, 0xdd, 0x28, 0x63, 0x13, 0x63, 0x0a, 0xbe, 0xdf, 0x65,
	0x9f, 0x59, 0x5c, 0x96, 0x1b, 0x6e, 0x6e, 0x22, 0x41, 0x7c, 0xf1, 0x27, 0x28, 0xfe, 0x32, 0xff,
	0x82, 0x3f, 0x44, 0x72, 0xd3, 0xba, 0xd2, 0xc1, 0xc4, 0xa7, 0xe4, 0x9e, 0xef, 0x9c, 0x7b, 0xee,
	0xb9, 0xe7, 0x42, 0x37, 0x27, 0x51, 0xc6, 0x21, 0x39, 0x99, 0xe0, 0x92, 0x63, 0xab, 0xf4, 0xcc,
	0xdd, 0x88, 0xf3, 0x28, 0x21, 0x57, 0x21, 0xe7, 0xc5, 0x47, 0x97, 0xae, 0x33, 0x59, 0x35, 0x04,
	0x73, 0x6f, 0x39, 0x64, 0x59, 0xec, 0xb2, 0x34, 0xe5, 0x92, 0xc9, 0x98, 0xa7, 0xf9, 0x72, 0xfa,
	0x5c, 0x7d, 0xc2, 0x51, 0x44, 0xe9, 0x28, 0xff, 0xcc, 0xa2, 0x88, 0x84, 0xcb, 0x33, 0xc5, 0xb8,
	0xcd, 0xb6, 0x7d, 0x30, 0x16, 0x92, 0xc9, 0x22, 0xc7, 0x67, 0x70, 0x2f, 0xe4, 0x17, 0x34, 0xd0,
	0x2c, 0x6d, 0xf8, 0xc8, 0xdb, 0x71, 0x4a, 0xcf, 0x69, 0x26, 0x4e, 0x40, 0x79, 0xc6, 0xd3, 0x9c,
	0x02, 0x45, 0xb0, 0x9f, 0xc2, 0x83, 0x15, 0x82, 0x06, 0xb4, 0xde, 0x9d, 0xf6, 0xb6, 0xb0, 0x03,
	0xed, 0x63, 0x21, 0xb8, 0xe8, 0x69, 0xf6, 0x6b, 0xe8, 0x2c, 0x88, 0x89, 0xf0, 0xf2, 0x94, 0x2a,
	0xdc, 0x07, 0x60, 0x59, 0xfc, 0x81, 0x44, 0x1e, 0xf3, 0x54, 0x6d, 0xdd, 0x09, 0xd6, 0x10, 0xec,
	0x81, 0x7e, 0x45, 0xd5, 0xa0, 0x65, 0x69, 0xc3, 0xed, 0xa0, 0xfe, 0xb5, 0xdf, 0xc3, 0x7d, 0x9f,
	0x55, 0x09, 0x67, 0x17, 0xff, 0x2f, 0xc6, 0xc7, 0xd0, 0x2e, 0x59, 0x52, 0xd0, 0x40, 0x57, 0x58,
	0xb3, 0xf0, 0x7e, 0xea, 0xd0, 0x9e, 0xb1, 0xf0, 0x92, 0xf0, 0x0d, 0xe8, 0x73, 0x92, 0xd8, 0x55,
	0xe1, 0x56, 0x87, 0x34, 0x1f, 0xd6, 0xcb, 0xa5, 0xa9, 0xbd, 0xfb, 0xed, 0xd7, 0xef, 0x1f, 0xad,
	0x27, 0xb8, 0xe3, 0x96, 0x9e, 0x1b, 0xd6, 0x2a, 0x77, 0x4e, 0xd2, 0xfd, 0x72, 0x45, 0xd5, 0x57,
	0x7c, 0x01, 0xdd, 0x85, 0x14, 0xc4, 0xae, 0xe7, 0x24, 0xdf, 0xb2, 0xb4, 0xba, 0x73, 0xa7, 0xad,
	0xa1, 0x36, 0xd6, 0xf0, 0x15, 0x6c, 0xff, 0x95, 0x4c, 0x92, 0x04, 0xfb, 0x4e, 0xd3, 0x9e, 0xb3,
	0xaa, 0xd6, 0x39, 0xae, 0xab, 0xdd, 0x90, 0x8e, 0x35, 0x1c, 0x42, 0xa7, 0x11, 0xfa, 0x85, 0xc4,
	0xf5, 0xa9, 0x09, 0x37, 0xdd, 0xd4, 0x26, 0x38, 0x05, 0xfd, 0x4e, 0x8e, 0xad, 0x22, 0xed, 0x99,
	0x6b, 0x91, 0xfc, 0x62, 0x19, 0xe9, 0xb0, 0xb9, 0x23, 0x1c, 0xad, 0x8e, 0x79, 0x44, 0x09, 0x49,
	0xda, 0x0c, 0xb6, 0x69, 0x39, 0x03, 0xe3, 0xdf, 0xc4, 0x7d, 0xe5, 0x3b, 0x38, 0xe8, 0xdf, 0xf8,
	0x36, 0xa2, 0xc6, 0x7a, 0x7a, 0xf6, 0x7d, 0x72, 0x82, 0x16, 0xf4, 0xe7, 0x81, 0x3f, 0xb3, 0xce,
	0xa8, 0xa4, 0xe4, 0x68, 0x6a, 0xa9, 0xa2, 0xac, 0x89, 0x7f, 0xe2, 0x19, 0xa5, 0xe7, 0x8c, 0x9d,
	0xf1, 0x81, 0xd6, 0xf2, 0x7a, 0x2c, 0xcb, 0x92, 0x38, 0x54, 0x2f, 0xd7, 0xfd, 0x94, 0xf3, 0xf4,
	0xf0, 0x16, 0x72, 0x6e, 0xa8, 0x0b, 0x7d, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x1e, 0xf3,
	0x2f, 0x4e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacheClient interface {
	Get(ctx context.Context, in *SearchKey, opts ...grpc.CallOption) (*Payload, error)
	StreamGetMany(ctx context.Context, opts ...grpc.CallOption) (Cache_StreamGetManyClient, error)
	StreamGetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Cache_StreamGetAllClient, error)
	StreamPut(ctx context.Context, opts ...grpc.CallOption) (Cache_StreamPutClient, error)
	Put(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error)
	StreamDelete(ctx context.Context, opts ...grpc.CallOption) (Cache_StreamDeleteClient, error)
	Delete(ctx context.Context, in *SearchKey, opts ...grpc.CallOption) (*Status, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Get(ctx context.Context, in *SearchKey, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/v2.Cache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) StreamGetMany(ctx context.Context, opts ...grpc.CallOption) (Cache_StreamGetManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[0], "/v2.Cache/StreamGetMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheStreamGetManyClient{stream}
	return x, nil
}

type Cache_StreamGetManyClient interface {
	Send(*SearchKey) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type cacheStreamGetManyClient struct {
	grpc.ClientStream
}

func (x *cacheStreamGetManyClient) Send(m *SearchKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheStreamGetManyClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) StreamGetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Cache_StreamGetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[1], "/v2.Cache/StreamGetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheStreamGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_StreamGetAllClient interface {
	Recv() (*Payload, error)
	grpc.ClientStream
}

type cacheStreamGetAllClient struct {
	grpc.ClientStream
}

func (x *cacheStreamGetAllClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) StreamPut(ctx context.Context, opts ...grpc.CallOption) (Cache_StreamPutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[2], "/v2.Cache/StreamPut", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheStreamPutClient{stream}
	return x, nil
}

type Cache_StreamPutClient interface {
	Send(*Payload) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type cacheStreamPutClient struct {
	grpc.ClientStream
}

func (x *cacheStreamPutClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheStreamPutClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) Put(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/v2.Cache/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) StreamDelete(ctx context.Context, opts ...grpc.CallOption) (Cache_StreamDeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[3], "/v2.Cache/StreamDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheStreamDeleteClient{stream}
	return x, nil
}

type Cache_StreamDeleteClient interface {
	Send(*SearchKey) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type cacheStreamDeleteClient struct {
	grpc.ClientStream
}

func (x *cacheStreamDeleteClient) Send(m *SearchKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheStreamDeleteClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) Delete(ctx context.Context, in *SearchKey, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/v2.Cache/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer is the server API for Cache service.
type CacheServer interface {
	Get(context.Context, *SearchKey) (*Payload, error)
	StreamGetMany(Cache_StreamGetManyServer) error
	StreamGetAll(*empty.Empty, Cache_StreamGetAllServer) error
	StreamPut(Cache_StreamPutServer) error
	Put(context.Context, *Payload) (*Status, error)
	StreamDelete(Cache_StreamDeleteServer) error
	Delete(context.Context, *SearchKey) (*Status, error)
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.Cache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*SearchKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_StreamGetMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).StreamGetMany(&cacheStreamGetManyServer{stream})
}

type Cache_StreamGetManyServer interface {
	Send(*Payload) error
	Recv() (*SearchKey, error)
	grpc.ServerStream
}

type cacheStreamGetManyServer struct {
	grpc.ServerStream
}

func (x *cacheStreamGetManyServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheStreamGetManyServer) Recv() (*SearchKey, error) {
	m := new(SearchKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_StreamGetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).StreamGetAll(m, &cacheStreamGetAllServer{stream})
}

type Cache_StreamGetAllServer interface {
	Send(*Payload) error
	grpc.ServerStream
}

type cacheStreamGetAllServer struct {
	grpc.ServerStream
}

func (x *cacheStreamGetAllServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func _Cache_StreamPut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).StreamPut(&cacheStreamPutServer{stream})
}

type Cache_StreamPutServer interface {
	SendAndClose(*Status) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type cacheStreamPutServer struct {
	grpc.ServerStream
}

func (x *cacheStreamPutServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheStreamPutServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.Cache/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Put(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_StreamDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).StreamDelete(&cacheStreamDeleteServer{stream})
}

type Cache_StreamDeleteServer interface {
	SendAndClose(*Status) error
	Recv() (*SearchKey, error)
	grpc.ServerStream
}

type cacheStreamDeleteServer struct {
	grpc.ServerStream
}

func (x *cacheStreamDeleteServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheStreamDeleteServer) Recv() (*SearchKey, error) {
	m := new(SearchKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.Cache/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Delete(ctx, req.(*SearchKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Cache_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cache_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGetMany",
			Handler:       _Cache_StreamGetMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamGetAll",
			Handler:       _Cache_StreamGetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPut",
			Handler:       _Cache_StreamPut_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamDelete",
			Handler:       _Cache_StreamDelete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
