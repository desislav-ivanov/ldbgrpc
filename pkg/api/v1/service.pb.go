// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status_Response int32

const (
	Status_OK    Status_Response = 0
	Status_Error Status_Response = 1
)

var Status_Response_name = map[int32]string{
	0: "OK",
	1: "Error",
}

var Status_Response_value = map[string]int32{
	"OK":    0,
	"Error": 1,
}

func (x Status_Response) String() string {
	return proto.EnumName(Status_Response_name, int32(x))
}

func (Status_Response) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 0}
}

type Status struct {
	Code                 Status_Response `protobuf:"varint,1,opt,name=code,proto3,enum=v1.Status_Response" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() Status_Response {
	if m != nil {
		return m.Code
	}
	return Status_OK
}

type SearchKey struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchKey) Reset()         { *m = SearchKey{} }
func (m *SearchKey) String() string { return proto.CompactTextString(m) }
func (*SearchKey) ProtoMessage()    {}
func (*SearchKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *SearchKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchKey.Unmarshal(m, b)
}
func (m *SearchKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchKey.Marshal(b, m, deterministic)
}
func (m *SearchKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchKey.Merge(m, src)
}
func (m *SearchKey) XXX_Size() int {
	return xxx_messageInfo_SearchKey.Size(m)
}
func (m *SearchKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchKey.DiscardUnknown(m)
}

var xxx_messageInfo_SearchKey proto.InternalMessageInfo

func (m *SearchKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Payload struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Payload) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("v1.Status_Response", Status_Response_name, Status_Response_value)
	proto.RegisterType((*Status)(nil), "v1.Status")
	proto.RegisterType((*SearchKey)(nil), "v1.SearchKey")
	proto.RegisterType((*Payload)(nil), "v1.Payload")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb1, 0xd3, 0xb8, 0x64, 0x50, 0x50, 0x98, 0x42, 0x89, 0x5c, 0x82, 0x2c, 0x5f, 0x88,
	0x2a, 0xea, 0x4d, 0xcc, 0x2d, 0x07, 0xa4, 0xb4, 0xa9, 0xac, 0x50, 0x2a, 0xac, 0xf4, 0x09, 0xb6,
	0xee, 0xe0, 0x86, 0x2e, 0x5e, 0xcb, 0x5e, 0x1b, 0x59, 0x88, 0x0b, 0x8f, 0x00, 0x8f, 0xc6, 0x03,
	0x70, 0xe1, 0x41, 0x90, 0xd7, 0x89, 0x9a, 0x10, 0x89, 0x93, 0xbd, 0xf3, 0xff, 0xff, 0xb7, 0xbb,
	0x33, 0x0b, 0xdd, 0x9c, 0xb2, 0x72, 0x19, 0x91, 0x97, 0x66, 0x52, 0x49, 0x34, 0xcb, 0xb1, 0x7d,
	0x14, 0x4b, 0x19, 0x0b, 0x62, 0xba, 0x72, 0x5d, 0x7c, 0x64, 0xf4, 0x39, 0x55, 0x55, 0x63, 0xb0,
	0x5f, 0xac, 0x44, 0x9e, 0x2e, 0x19, 0x4f, 0x12, 0xa9, 0xb8, 0x5a, 0xca, 0x24, 0x5f, 0xa9, 0xaf,
	0xf5, 0x27, 0x3a, 0x89, 0x29, 0x39, 0xc9, 0xbf, 0xf0, 0x38, 0xa6, 0x8c, 0xc9, 0x54, 0x3b, 0x76,
	0xdd, 0x6e, 0x08, 0xd6, 0x95, 0xe2, 0xaa, 0xc8, 0xf1, 0x15, 0xec, 0x45, 0xf2, 0x86, 0xfa, 0x86,
	0x63, 0x0c, 0x1f, 0xfb, 0x07, 0x5e, 0x39, 0xf6, 0x1a, 0xc5, 0x5b, 0x50, 0x9e, 0xca, 0x24, 0xa7,
	0x85, 0x36, 0xb8, 0x03, 0x78, 0xb8, 0xae, 0xa0, 0x05, 0xe6, 0x87, 0x8b, 0xde, 0x03, 0xec, 0x40,
	0xfb, 0x3c, 0xcb, 0x64, 0xd6, 0x33, 0xdc, 0x01, 0x74, 0xae, 0x88, 0x67, 0xd1, 0xed, 0x05, 0x55,
	0xd8, 0x83, 0xd6, 0x1d, 0x55, 0x9a, 0xd9, 0x59, 0xd4, 0xbf, 0xee, 0x18, 0xf6, 0x43, 0x5e, 0x09,
	0xc9, 0x6f, 0x76, 0x45, 0x7c, 0x0a, 0xed, 0x92, 0x8b, 0x82, 0xfa, 0xa6, 0xae, 0x35, 0x0b, 0xff,
	0xb7, 0x09, 0xed, 0x33, 0x1e, 0xdd, 0x12, 0xbe, 0x85, 0x56, 0x40, 0x0a, 0xbb, 0xfa, 0x70, 0xeb,
	0x4d, 0xec, 0x47, 0xf5, 0x72, 0x05, 0x75, 0x8f, 0xbe, 0xff, 0xfa, 0xf3, 0xd3, 0x7c, 0x86, 0x07,
	0xac, 0x1c, 0xb3, 0xa8, 0x4e, 0xb1, 0x80, 0x14, 0xfb, 0x7a, 0x47, 0xd5, 0x37, 0x9c, 0xc3, 0x7e,
	0x40, 0xea, 0x92, 0x27, 0xd5, 0x7f, 0x19, 0x2f, 0x35, 0xa3, 0xef, 0x3e, 0xd9, 0x62, 0xd4, 0xb1,
	0x49, 0x7d, 0xcc, 0xa1, 0x31, 0x32, 0x70, 0x0e, 0x56, 0x40, 0x6a, 0x2a, 0x04, 0x1e, 0x7a, 0xcd,
	0x3c, 0xbc, 0xf5, 0xb0, 0xbc, 0xf3, 0x7a, 0x58, 0xdb, 0xc8, 0xbe, 0x46, 0x22, 0xf6, 0xb6, 0x90,
	0x53, 0x21, 0x46, 0x06, 0x4e, 0xa0, 0x15, 0x16, 0x0a, 0x37, 0xfd, 0x36, 0xdc, 0xf7, 0x7f, 0x9d,
	0xb5, 0xbb, 0xf7, 0xd9, 0xb0, 0x50, 0x13, 0xe3, 0x78, 0x68, 0xe0, 0x0c, 0xac, 0x19, 0x09, 0x52,
	0xf4, 0xef, 0x85, 0x36, 0x01, 0x03, 0x0d, 0x78, 0xee, 0x6e, 0x6c, 0xde, 0x84, 0x56, 0xd7, 0x39,
	0xbd, 0xfc, 0x31, 0x7d, 0x87, 0x0e, 0x1c, 0x06, 0x8b, 0xf0, 0xcc, 0x79, 0x4f, 0x25, 0x89, 0xd9,
	0xa9, 0xa3, 0x5b, 0xee, 0x4c, 0xc3, 0xb9, 0x6f, 0x95, 0xbe, 0x37, 0xf2, 0x46, 0xc7, 0xa6, 0xb9,
	0xe7, 0xf7, 0x78, 0x9a, 0x8a, 0x65, 0xa4, 0x1f, 0x11, 0xfb, 0x94, 0xcb, 0x64, 0xb2, 0x53, 0xb9,
	0xb6, 0x74, 0x27, 0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xea, 0xea, 0x36, 0xc1, 0xd9, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacheClient interface {
	Get(ctx context.Context, in *SearchKey, opts ...grpc.CallOption) (*Payload, error)
	GetMany(ctx context.Context, opts ...grpc.CallOption) (Cache_GetManyClient, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Cache_GetAllClient, error)
	Put(ctx context.Context, opts ...grpc.CallOption) (Cache_PutClient, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (Cache_DeleteClient, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Get(ctx context.Context, in *SearchKey, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/v1.Cache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetMany(ctx context.Context, opts ...grpc.CallOption) (Cache_GetManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[0], "/v1.Cache/GetMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheGetManyClient{stream}
	return x, nil
}

type Cache_GetManyClient interface {
	Send(*SearchKey) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type cacheGetManyClient struct {
	grpc.ClientStream
}

func (x *cacheGetManyClient) Send(m *SearchKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheGetManyClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Cache_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[1], "/v1.Cache/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_GetAllClient interface {
	Recv() (*Payload, error)
	grpc.ClientStream
}

type cacheGetAllClient struct {
	grpc.ClientStream
}

func (x *cacheGetAllClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) Put(ctx context.Context, opts ...grpc.CallOption) (Cache_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[2], "/v1.Cache/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &cachePutClient{stream}
	return x, nil
}

type Cache_PutClient interface {
	Send(*Payload) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type cachePutClient struct {
	grpc.ClientStream
}

func (x *cachePutClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cachePutClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) Delete(ctx context.Context, opts ...grpc.CallOption) (Cache_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cache_serviceDesc.Streams[3], "/v1.Cache/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheDeleteClient{stream}
	return x, nil
}

type Cache_DeleteClient interface {
	Send(*SearchKey) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type cacheDeleteClient struct {
	grpc.ClientStream
}

func (x *cacheDeleteClient) Send(m *SearchKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheDeleteClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacheServer is the server API for Cache service.
type CacheServer interface {
	Get(context.Context, *SearchKey) (*Payload, error)
	GetMany(Cache_GetManyServer) error
	GetAll(*empty.Empty, Cache_GetAllServer) error
	Put(Cache_PutServer) error
	Delete(Cache_DeleteServer) error
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Cache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*SearchKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).GetMany(&cacheGetManyServer{stream})
}

type Cache_GetManyServer interface {
	Send(*Payload) error
	Recv() (*SearchKey, error)
	grpc.ServerStream
}

type cacheGetManyServer struct {
	grpc.ServerStream
}

func (x *cacheGetManyServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheGetManyServer) Recv() (*SearchKey, error) {
	m := new(SearchKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).GetAll(m, &cacheGetAllServer{stream})
}

type Cache_GetAllServer interface {
	Send(*Payload) error
	grpc.ServerStream
}

type cacheGetAllServer struct {
	grpc.ServerStream
}

func (x *cacheGetAllServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func _Cache_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).Put(&cachePutServer{stream})
}

type Cache_PutServer interface {
	SendAndClose(*Status) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type cachePutServer struct {
	grpc.ServerStream
}

func (x *cachePutServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cachePutServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).Delete(&cacheDeleteServer{stream})
}

type Cache_DeleteServer interface {
	SendAndClose(*Status) error
	Recv() (*SearchKey, error)
	grpc.ServerStream
}

type cacheDeleteServer struct {
	grpc.ServerStream
}

func (x *cacheDeleteServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheDeleteServer) Recv() (*SearchKey, error) {
	m := new(SearchKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMany",
			Handler:       _Cache_GetMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _Cache_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _Cache_Put_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _Cache_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
